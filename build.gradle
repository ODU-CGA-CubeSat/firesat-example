/* 
 * The Maven coordinates for the project artifact
 */
description='The FireSat example project'
group = 'io.opencaesar.ontologies'
version = '1.2.0'

/* 
 * The Gradle task dependencies 
 */
buildscript {
	repositories {
		mavenLocal()
		maven { url 'https://dl.bintray.com/opencaesar/owl-adapter' }
		maven { url 'https://dl.bintray.com/opencaesar/owl-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml' }
		jcenter()
	}
	dependencies {
		classpath 'io.opencaesar.owl:owl-query-gradle:+'
		classpath 'io.opencaesar.owl:owl-load-gradle:+'
		classpath 'io.opencaesar.owl:owl-reason-gradle:+'
		classpath 'io.opencaesar.owl:oml2owl-gradle:+'
		classpath 'io.opencaesar.oml:oml-bikeshed-gradle:+'
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.+'
		classpath 'io.opencaesar.owl:owl-load-gradle:0.4.1'
		classpath 'io.opencaesar.owl:owl-query-gradle:0.4.1'
		classpath 'io.opencaesar.docbook:docbook-adapter-gradle:+'
		// needed since gradle bintray brings an old version of xerces
		configurations.classpath.exclude group: 'xerces', module: 'xercesImpl'
	}
}

/*
 * The configuration of OML dependencies
 */
configurations {
	oml // Include the oml dependencies only
	stylesheets // Include the docbook stylesheets
	fuseki //Include fuseki server
}

/*
 * The repositories to look up OML dependencies in
 */
repositories {
	mavenLocal()
	maven { url 'https://dl.bintray.com/opencaesar/vocabularies' }
	mavenCentral()
}

/*
 * The OML dependencies
 */
dependencies {
	oml 'io.opencaesar.ontologies:vocabularies:1.0.+'
	stylesheets "io.opencaesar.docbook:docbook-stylesheets:+"
	fuseki "org.apache.jena:jena-fuseki-server:3.16.0"
}
/*
 * A task to extract and merge the OML dependencies
 */
task omldependencies(type: Copy) {
    from configurations.oml.files.collect { zipTree(it) }
    into file('build/dependencies')
}

/*
 * A task to convert the OML catalog to OWL catalog
 */
task oml2owl(type:io.opencaesar.oml2owl.Oml2OwlTask, dependsOn: omldependencies) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL catalog
	outputCatalogPath = file('build/owl/catalog.xml')
}

/*
 * A task to run the Openllet reasoner on the OWL catalog
 */
task owlreason(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: oml2owl) {
	// OWL catalog
	catalogPath = file('build/owl/catalog.xml')
	// Input ontology IRI to reason on
	inputOntologyIri = 'http://opencaesar.io/programs/earth-science/projects/firesat/bundle'
	// Entailment statements to generate and the ontologies to persist them in
	specs = [
		'http://opencaesar.io/programs/earth-science/projects/firesat/bundle/classes = ALL_SUBCLASS',
		'http://opencaesar.io/programs/earth-science/projects/firesat/bundle/properties = INVERSE_PROPERTY | ALL_SUBPROPERTY',
		'http://opencaesar.io/programs/earth-science/projects/firesat/bundle/individuals = ALL_INSTANCE | DATA_PROPERTY_VALUE | OBJECT_PROPERTY_VALUE | SAME_AS'
	]
	// Junit error report
	reportPath = file('build/reports/reasoning.xml')
}
/*
task owlload(type:io.opencaesar.owl.load.OwlLoadTask, dependsOn: owlreason) {
	catalogPath = file('build/owl/catalog.xml')
	endpointURL = 'http://localhost:3030/firesat'
    fileExtensions = ['owl', 'ttl']
}

task owlquery(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlload) {
	endpointURL = 'http://localhost:3030/firesat'
	queryPath = file('src/sparql/compositions.sparql')
	resultPath = file('build/frames')
}
*/
/*
 * A task to generate Bikeshed specification for the OML catalog
 */
task oml2bikeshed(type: io.opencaesar.oml.bikeshed.Oml2BikeshedTask, dependsOn: omldependencies) {
	// OML catalog
	inputCatalogPath = file('catalog.xml')
	// OWL folder
	outputFolderPath = file('build/bikeshed')
	// Publish URL
	publishUrl = 'https://opencaesar.github.io/vocabularies/'
}

/*
 * A task to render the Bikeshed specification to HTML
 */
task bikeshed2html(dependsOn: oml2bikeshed) {
	doLast {
		exec { commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' }
		exec { commandLine 'build/bikeshed/publish.sh' }
	}
}

/*
 * A task to generate a publishable Zip archive for the OML sources of this project
 */
task omlzip(type: Zip) {
	from file('src/oml')
	destinationDir(file('build/libs'))
	archiveBaseName = project.name
	archiveVersion = project.version
}

/*
 * Zips stylesheets from docbook-stylesheets (local maven)
 * Places them in build/stylesheets-gen 
 */
task stylesheetUnzip(type: Copy) {
  from configurations.stylesheets.files.collect { zipTree(it) }
  into file("build/stylesheets-gen")
}

/*
 * Gets a fuseki jar to create a server
 */
task fusekiGet(type: Copy) {
	// java -jar jena-fuseki-server-3.16.0.jar --mem firesat
	from configurations.fuseki
	into file("build/fuseki")
}

/*
 * Load the vocabulary into the Fuseki Server
 */
task MyOwlLoad(type:io.opencaesar.owl.load.OwlLoadTask) {
	catalogPath = file('build/owl/catalog.xml')
	//endpointURL = 'http://localhost:3030/firesat'
	endpointURL = 'http://localhost:8080/fuseki/firesat'
	fileExtensions = ['owl', 'ttl']
}          

/*
 * Queries a SPARQL server and places the results in the specified folder 
 */
task MyOwlQuery(type:io.opencaesar.owl.query.OwlQueryTask) {
	endpointURL = 'http://localhost:8080/fuseki/firesat'
	queryPath = file('src/document/queries')
	resultPath = file('build/frames')
    format = 'xml'
}

MyOwlQuery.mustRunAfter(MyOwlLoad)
/* Run server through docker? 
task fusekiStart() {
	doLast {
		exec {
			// exec { commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' }
	 		commandLine 'java', '-jar', 'build/fuseki/jena-fuseki-server-3.16.0.jar',
	 		 '--mem', 'firesat'
		}	}
}
*/

/*
 * A task to build the project, which executes several tasks together
 */
task build() {
	dependsOn omlzip
	dependsOn owlreason
	//dependsOn bikeshed2html
	dependsOn stylesheetUnzip
	dependsOn fusekiGet
}

task dbTag(type:io.opencaesar.docbook.adapter.DocbookAdapterTask) {
	//input = file('src/document/docbook/docbook.xml')
	input = file('src/document/docbook/wbs/src/work_breakdown_structure.xml')
	type = 'tag'
	//xsl = file('build/stylesheets-gen/tag/all_transformations.xsl')
	xsl = file ('../docbook-tools/docbook-tools/docbook-stylesheets/src/stylesheets/tag/all_transformations.xsl')
	original = file('build/stylesheets-gen/docbook_xsl')
	frame = file('build/frames')	
}

task dbPDF(type:io.opencaesar.docbook.adapter.DocbookAdapterTask) {
	input = file('src/document/docbook/wbs/src-gen/work_breakdown_structure.xml')
	type = 'pdf'
	xsl = file('src/document/src-gen/pdf/pdf_ext.xsl')
}

task dbHTML(type:io.opencaesar.docbook.adapter.DocbookAdapterTask) {
	input = file('src/document/docbook/wbs/src-gen/work_breakdown_structure.xml')
	type = 'html'
	xsl = file('src/document/src-gen/html/html_ext.xsl')
	css = file('build/stylesheet-gen/default.css')
}

dbTag.mustRunAfter(MyOwlQuery)
dbHTML.mustRunAfter(dbTag)
dbPDF.mustRunAfter(dbTag)

task dbRender() {
	dependsOn dbTag
	dependsOn dbPDF
	dependsOn dbHTML
}

task createDoc() {
	dependsOn MyOwlLoad
	dependsOn MyOwlQuery
	dependsOn dbRender
}

/*
 * A task to delete the build artifacts
 */
task clean(type: Delete) {
	delete 'build'
}

/*
 * Publish to Maven spec
 */
apply plugin: 'maven-publish'

publishToMavenLocal.dependsOn omlzip

publishing {
    publications {
        maven(MavenPublication) {
            artifact omlzip
        }
    }
}

/*
 * Publish to Bintrary Spec
 */
apply plugin: 'com.jfrog.bintray'

ext.gh = [
	dep: 'https://github.com',
	org: 'opencaesar',
	rep: 'example-firesat'
]

bintray {
	user = System.getenv('BINTRAY_USER')
	key = System.getenv('BINTRAY_API_KEY')
	publications = ['maven']
	publish = true
	override = true
	pkg {
		name = project.name
		repo = gh.rep
		userOrg = gh.org
		desc = project.description
		licenses = ['Apache-2.0']
		websiteUrl = gh.dep+'/'+gh.org+'/'+gh.rep
        issueTrackerUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'/issues'
		vcsUrl = gh.dep+'/'+gh.org+'/'+gh.rep+'.git'
		version {
			name = project.version
			desc = project.version
			released  = new Date()
		}
	}

}
