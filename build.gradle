@@ -8,6 +8,7 @@ version = '1.2.0'
/* 
 * The Gradle task dependencies 
 */
import com.wiredforcode.gradle.spawn.*
buildscript {
	repositories {
		mavenLocal()
@ -15,6 +16,7 @@ buildscript {
		maven { url 'https://dl.bintray.com/opencaesar/owl-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml-tools' }
		maven { url 'https://dl.bintray.com/opencaesar/oml' }
		maven { url 'http://dl.bintray.com/vermeulen-mp/gradle-plugins' }
		jcenter()
	}
	dependencies {
@ -27,6 +29,7 @@ buildscript {
		classpath 'io.opencaesar.owl:owl-load-gradle:0.4.1'
		classpath 'io.opencaesar.owl:owl-query-gradle:0.4.1'
		classpath 'io.opencaesar.docbook:docbook-adapter-gradle:+'
		classpath 'com.wiredforcode:gradle-spawn-plugin:0.8.1'
		// needed since gradle bintray brings an old version of xerces
		configurations.classpath.exclude group: 'xerces', module: 'xercesImpl'
	}
@ -56,7 +59,7 @@ repositories {
dependencies {
	oml 'io.opencaesar.ontologies:vocabularies:1.0.+'
	stylesheets "io.opencaesar.docbook:docbook-stylesheets:+"
	fuseki "org.apache.jena:jena-fuseki-server:3.16.0"
	fuseki "org.apache.jena:jena-fuseki-war:3.16.0"
}
/*
 * A task to extract and merge the OML dependencies
@ -93,19 +96,7 @@ task owlreason(type:io.opencaesar.owl.reason.OwlReasonTask, dependsOn: oml2owl)
	// Junit error report
	reportPath = file('build/reports/reasoning.xml')
}
/*
task owlload(type:io.opencaesar.owl.load.OwlLoadTask, dependsOn: owlreason) {
	catalogPath = file('build/owl/catalog.xml')
	endpointURL = 'http://localhost:3030/firesat'
    fileExtensions = ['owl', 'ttl']
}

task owlquery(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlload) {
	endpointURL = 'http://localhost:3030/firesat'
	queryPath = file('src/sparql/compositions.sparql')
	resultPath = file('build/frames')
}
*/
/*
 * A task to generate Bikeshed specification for the OML catalog
 */
@ -156,54 +147,31 @@ task fusekiGet(type: Copy) {
	into file("build/fuseki")
}

/*
 * Load the vocabulary into the Fuseki Server
 */
task MyOwlLoad(type:io.opencaesar.owl.load.OwlLoadTask) {
apply plugin: 'com.wiredforcode.spawn'

task startServer(type: SpawnProcessTask, dependsOn: fusekiGet) {
	command "java -jar ${projectDir}/build/fuseki/jena-fuseki-server-3.16.0.jar --mem firesat"
	//command "build/fuseki/fuseki-server.bat"
	ready "Apache Jena Fuseki 3.16.0"
}
task stopServer(type: KillProcessTask)

task owlload(type:io.opencaesar.owl.load.OwlLoadTask) {
	catalogPath = file('build/owl/catalog.xml')
	//endpointURL = 'http://localhost:3030/firesat'
	endpointURL = 'http://localhost:8080/fuseki/firesat'
	fileExtensions = ['owl', 'ttl']
}          
    fileExtensions = ['owl', 'ttl']
}

/*
 * Queries a SPARQL server and places the results in the specified folder 
 */
task MyOwlQuery(type:io.opencaesar.owl.query.OwlQueryTask) {
task owlquery(type:io.opencaesar.owl.query.OwlQueryTask, dependsOn: owlload) {
	endpointURL = 'http://localhost:8080/fuseki/firesat'
	queryPath = file('src/document/physical/queries')
	resultPath = file('build/frames')
    format = 'xml'
}

MyOwlQuery.mustRunAfter(MyOwlLoad)
/* Run server through docker? 
task fusekiStart() {
	doLast {
		exec {
			// exec { commandLine 'chmod', '+x', 'build/bikeshed/publish.sh' }
	 		commandLine 'java', '-jar', 'build/fuseki/jena-fuseki-server-3.16.0.jar',
	 		 '--mem', 'firesat'
		}	}
}
*/

/*
 * A task to build the project, which executes several tasks together
 */
task build() {
	dependsOn omlzip
	dependsOn owlreason
	//dependsOn bikeshed2html
	dependsOn stylesheetUnzip
	dependsOn fusekiGet
	format = 'xml'
}

task dbTag(type:io.opencaesar.docbook.adapter.DocbookAdapterTask) {
	//input = file('src/document/docbook/docbook.xml')
	input = file('src/document/physical/src/physical_structure.xml')
	type = 'tag'
	//xsl = file('build/stylesheets-gen/tag/all_transformations.xsl')
	xsl = file ('../docbook-tools/docbook-tools/docbook-stylesheets/src/stylesheets/tag/all_transformations.xsl')
	original = file('build/stylesheets-gen/docbook_xsl')
	frame = file('build/frames')	
@ -222,7 +190,7 @@ task dbHTML(type:io.opencaesar.docbook.adapter.DocbookAdapterTask) {
	css = file('../docbook-tools/docbook-tools/docbook-stylesheets/src/stylesheets/default.css')
}

dbTag.mustRunAfter(MyOwlQuery)
dbTag.mustRunAfter(owlquery)
dbHTML.mustRunAfter(dbTag)
dbPDF.mustRunAfter(dbTag)

@ -233,11 +201,28 @@ task dbRender() {
}

task createDoc() {
	dependsOn MyOwlLoad
	dependsOn MyOwlQuery
	dependsOn owlload
	dependsOn owlquery
	dependsOn dbRender
}

createDoc.mustRunAfter(startServer)
createDoc.mustRunAfter(stylesheetUnzip)
createDoc.mustRunAfter(owlreason)
/*
 * A task to build the project, which executes several tasks together
 */
task build() {
	dependsOn omlzip
	dependsOn owlreason
	//dependsOn bikeshed2html
	dependsOn stylesheetUnzip
	dependsOn fusekiGet
	//dependsOn startServer
	//dependsOn createDoc
	//dependsOn stopServer
}

/*
 * A task to delete the build artifacts
 */